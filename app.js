// Keresd meg az √∂sszes c√≠mk√©t √©s cseppz√≥n√°t
const labels = document.querySelectorAll('.label'); // Ezek a c√≠mk√©k, amiket h√∫zni lehet
const dropZones = document.querySelectorAll('.drop-zone'); // Ezek a helyek, ahova a c√≠mk√©ket le lehet tenni
const initialContainer = document.getElementById('initial-container'); // Itt vannak a c√≠mk√©k, amikor nem mozgunk vel√ºk

// Minden c√≠mk√©n√©l, amikor elind√≠tod a h√∫z√°st
labels.forEach(label => {
    label.addEventListener('dragstart', dragStart); // Amikor elkezded h√∫zni a c√≠mk√©t, h√≠vd meg a dragStart funkci√≥t
});

// Minden cseppz√≥n√°n√°l, amikor r√°h√∫zod a c√≠mk√©t
dropZones.forEach(zone => {
    zone.addEventListener('dragover', dragOver); // Amikor a c√≠mk√©t f√∂l√© h√∫zod, h√≠vd meg a dragOver funkci√≥t
    zone.addEventListener('drop', drop); // Amikor a c√≠mk√©t leteszed, h√≠vd meg a drop funkci√≥t
});

// Engedd meg, hogy az alap t√°rol√≥ is fogadjon c√≠mk√©ket
initialContainer.addEventListener('dragover', dragOver); // Amikor a c√≠mk√©t f√∂l√© h√∫zod, h√≠vd meg a dragOver funkci√≥t
initialContainer.addEventListener('drop', dropToInitialContainer); // Amikor a c√≠mk√©t leteszed, h√≠vd meg a dropToInitialContainer funkci√≥t

// Amikor megnyomod a gombot, ellen≈ërizd a megold√°st
document.getElementById('check-solution').addEventListener('click', checkSolution);

// Ez a funkci√≥ akkor indul, amikor elkezded h√∫zni a c√≠mk√©t
function dragStart(e) {
    e.dataTransfer.setData('text', e.target.id); // Mond meg, hogy melyik c√≠mk√©t h√∫zod
}

// Ez a funkci√≥ akkor indul, amikor a c√≠mk√©t a cseppz√≥na f√∂l√© h√∫zod
function dragOver(e) {
    e.preventDefault(); // Engedd meg, hogy a c√≠mke leker√ºlj√∂n
}

// Ez a funkci√≥ akkor indul, amikor leteszed a c√≠mk√©t a cseppz√≥n√°ba
function drop(e) {
    e.preventDefault(); // Ne friss√≠tsd az oldalt

    // N√©zd meg, hogy van-e m√°r c√≠mke a cseppz√≥n√°ban
    if (e.target.firstChild) {
        return; // Ha van m√°r c√≠mke, ne csin√°lj semmit
    }

    const labelId = e.dataTransfer.getData('text'); // Szerezd meg, melyik c√≠mk√©t h√∫ztad
    const label = document.getElementById(labelId); // Keresd meg a c√≠mk√©t

    // Tedd a h√∫zott c√≠mk√©t a cseppz√≥n√°ba
    e.target.appendChild(label);

    // √Åll√≠tsd vissza a helyettes√≠t≈ë sz√∂veget semleges √°llapotra
    resetPlaceholder();
}

// Ez a funkci√≥ akkor indul, amikor leteszed a c√≠mk√©t az alap t√°rol√≥ba
function dropToInitialContainer(e) {
    e.preventDefault(); // Ne friss√≠tsd az oldalt
    const labelId = e.dataTransfer.getData('text'); // Szerezd meg, melyik c√≠mk√©t h√∫ztad
    const label = document.getElementById(labelId); // Keresd meg a c√≠mk√©t

    // Mozgasd a c√≠mk√©t vissza az alap t√°rol√≥ba
    initialContainer.appendChild(label);

    // √Åll√≠tsd vissza a helyettes√≠t≈ë sz√∂veget semleges √°llapotra
    resetPlaceholder();
}

// Ez a funkci√≥ vissza√°ll√≠tja a helyettes√≠t≈ë sz√∂veget
function resetPlaceholder() {
    const placeholder = document.getElementById('solution-placeholder'); // Keresd meg a helyettes√≠t≈ët
    placeholder.textContent = ''; // Tedd √ºress√© a sz√∂veget
    placeholder.style.backgroundColor = 'rgba(255, 255, 0, 0.3)'; // √Åll√≠tsd vissza a h√°tt√©rsz√≠nt s√°rg√°ra
}

// Ez a funkci√≥ ellen≈ërzi, hogy helyes-e a megold√°s
function checkSolution() {
    let allCorrect = true; // Minden helyes v√°ltoz√≥, ami igaz

    dropZones.forEach(zone => {
        const expectedLabel = zone.getAttribute('data-label'); // Szerezd meg, melyik c√≠mk√©t v√°rjuk
        const droppedLabel = zone.firstChild ? zone.firstChild.textContent : null; // N√©zd meg, van-e c√≠mke a z√≥n√°ban

        if (droppedLabel !== expectedLabel) {
            allCorrect = false; // Ha nem egyezik, akkor nem minden helyes
        }
    });

    const placeholder = document.getElementById('solution-placeholder'); // Keresd meg a helyettes√≠t≈ët
    
    if (allCorrect) {
        placeholder.textContent = 'Helyes megold√°s ü•≥'; // Ha minden helyes, √≠rd ki, hogy helyes
        placeholder.style.backgroundColor = 'rgba(0, 255, 0, 0.3)'; // √Åll√≠tsd a h√°tt√©rsz√≠nt z√∂ldre
    } else {
        placeholder.textContent = 'Helytelen megold√°s'; // Ha nem helyes, √≠rd ki, hogy helytelen
        placeholder.style.backgroundColor = 'rgba(255, 0, 0, 0.3)'; // √Åll√≠tsd a h√°tt√©rsz√≠nt pirosra
    }
}

// Keresd meg a reset gombot
document.getElementById('reset-button').addEventListener('click', resetLabels);

// Ez a funkci√≥ vissza√°ll√≠tja a c√≠mk√©ket az alap t√°rol√≥ba
function resetLabels() {
    const labels = document.querySelectorAll('.label'); // Keresd meg az √∂sszes c√≠mk√©t
    
    labels.forEach(label => {
        // Mozgasd vissza minden c√≠mk√©t az alap t√°rol√≥ba
        initialContainer.appendChild(label);
    });

    // √Åll√≠tsd vissza a helyettes√≠t≈ët semleges √°llapotra
    resetPlaceholder();
}
